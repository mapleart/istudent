<?php

class ModuleDocument_EntityDocument extends EntityORM {


    protected $aRelations = array(
        //'fields' => array(EntityORM::RELATION_TYPE_HAS_MANY, 'ModuleDocument_EntityDocumentSchemeField', 'document_scheme_id'),
        'values' => array(EntityORM::RELATION_TYPE_HAS_MANY, 'ModuleDocument_EntityDocumentValue', 'document_id'),
        'scheme' => array(EntityORM::RELATION_TYPE_BELONGS_TO, 'ModuleDocument_EntityDocumentScheme', 'document_scheme_id'),
        'user' => array(EntityORM::RELATION_TYPE_BELONGS_TO, 'ModuleUser_EntityUser', 'user_id'),

    );


    /*
     * Правила валидации данных сущности
     */
	protected $aValidateRules = array(
		array('id', 'number', 'min' => 1, 'allowEmpty' => true, 'integerOnly' => true),
	);



	/**
	 * Вызывается перед сохранением категории
	 *
	 * @return bool|void
	 */
	protected function beforeSave() {
        if ($this->_isNew()) {
            $this->setAddDate(date('Y-m-d H:i:s'));
        }else {
            $this->setActionDate(date('Y-m-d H:i:s'));
        }
		return parent::beforeSave();
	}


	/**
	 * Вызывается после сохранения категории
	 */
	protected function afterSave() {
		/*
		 * если это было редактирование категории
		 */
		if (!$this->_isNew()) {

		}
	}


	/**
	 * Вызывается перед удалением категории
	 *
	 * @return bool
	 */
	protected function beforeDelete() {

		return true;
	}


    public function getBadge() {
        return '<span class="badge badge-'.$this->getBadgeClass().'">'.$this->getStatusText().'</span>';

    }

    public function getStatusText() {
        switch ($this->getStatus()){
            case ModuleDocument::DOCUMENT_NEW:
                return 'Отправлено';
            case ModuleDocument::DOCUMENT_PROCESS:
                return 'В обработке';
            case ModuleDocument::DOCUMENT_SUCCESS:
                return 'Справка готова';
            case ModuleDocument::DOCUMENT_AGREEMENT:
                return 'На согласовании';
            case ModuleDocument::DOCUMENT_REJECT:
                return 'Отказ';
        }
    }
    public function getBadgeClass() {
        switch ($this->getStatus()){
            case ModuleDocument::DOCUMENT_NEW:
                return 'secondary';
            case ModuleDocument::DOCUMENT_PROCESS:
                return 'primary';
                case ModuleDocument::DOCUMENT_SUCCESS:
                return 'success';
            case ModuleDocument::DOCUMENT_AGREEMENT:
                return 'warning';
            case ModuleDocument::DOCUMENT_REJECT:
                return 'danger';
        }
    }

    public function getUrlFull()
    {
        return Router::GetPath('education').'document/view/'.$this->getId(); // TODO: Change the autogenerated stub
    }

}

?>